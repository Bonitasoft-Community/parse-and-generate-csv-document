
(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbTitle',function(){return{template:'<h1 ng-if="\'Level 1\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h1>\n<h2 ng-if="\'Level 2\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h2>\n<h3 ng-if="\'Level 3\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h3>\n<h4 ng-if="\'Level 4\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h4>\n<h5 ng-if="\'Level 5\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h5>\n<h6 ng-if="\'Level 6\' === properties.level" class="text-{{ properties.alignment }}">{{properties.text | uiTranslate}}</h6>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbText',function(){return{template:'<p ng-if="properties.allowHTML" class="text-{{ properties.alignment }}" ng-bind-html="properties.text | uiTranslate"></p>\n<p ng-if="!properties.allowHTML" class="text-{{ properties.alignment }}" ng-bind="properties.text | uiTranslate"></p>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbButton',function(){return{controllerAs:'ctrl',controller:function PbButtonCtrl($scope,$http,$location,$log,$window,localStorageService,modalService){'use strict';var vm=this;this.action=function action(){if($scope.properties.action==='Remove from collection'){removeFromCollection();closeModal($scope.properties.closeOnSuccess);}else if($scope.properties.action==='Add to collection'){addToCollection();closeModal($scope.properties.closeOnSuccess);}else if($scope.properties.action==='Start process'){startProcess();}else if($scope.properties.action==='Submit task'){submitTask();}else if($scope.properties.action==='Open modal'){closeModal($scope.properties.closeOnSuccess);openModal($scope.properties.modalId);}else if($scope.properties.action==='Close modal'){closeModal(true);}else if($scope.properties.url){doRequest($scope.properties.action,$scope.properties.url);}};function openModal(modalId){modalService.open(modalId);};function closeModal(shouldClose){if(shouldClose)
modalService.close();};function removeFromCollection(){if($scope.properties.collectionToModify){if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var index=-1;if($scope.properties.collectionPosition==='First'){index=0;}else if($scope.properties.collectionPosition==='Last'){index=$scope.properties.collectionToModify.length-1;}else if($scope.properties.collectionPosition==='Item'){index=$scope.properties.collectionToModify.indexOf($scope.properties.removeItem);}
if(index!==-1){$scope.properties.collectionToModify.splice(index,1);}}}
function addToCollection(){if(!$scope.properties.collectionToModify){$scope.properties.collectionToModify=[];}
if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var item=angular.copy($scope.properties.valueToAdd);if($scope.properties.collectionPosition==='First'){$scope.properties.collectionToModify.unshift(item);}else{$scope.properties.collectionToModify.push(item);}}
function startProcess(){var id=getUrlParam('id');if(id){var prom=doRequest('POST','../API/bpm/process/'+id+'/instantiation',getUserParam()).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the process definition id value from the URL');}}
function doRequest(method,url,params){vm.busy=true;var req={method:method,url:url,data:angular.copy($scope.properties.dataToSend),params:params};return $http(req).success(function(data,status){$scope.properties.dataFromSuccess=data;notifyParentFrame({message:'success',status:status,dataFromSuccess:data});if($scope.properties.targetUrlOnSuccess&&method!=='GET'){redirectIfNeeded();}
closeModal($scope.properties.closeOnSuccess);}).error(function(data,status){$scope.properties.dataFromError=data;notifyParentFrame({message:'error',status:status,dataFromError:data});}).finally(function(){vm.busy=false;});}
function redirectIfNeeded(){var iframeId=$window.frameElement?$window.frameElement.id:null;if(!iframeId||iframeId&&iframeId.indexOf('bonitaframe')!==0){$window.location.assign($scope.properties.targetUrlOnSuccess);}}
function notifyParentFrame(additionalProperties){if($window.parent!==$window.self){var dataToSend=angular.extend({},$scope.properties,additionalProperties);$window.parent.postMessage(JSON.stringify(dataToSend),'*');}}
function getUserParam(){var userId=getUrlParam('user');if(userId){return{'user':userId};}
return{};}
function getUrlParam(param){var paramValue=$location.absUrl().match('[//?&]'+param+'=([^&#]*)($|[&#])');if(paramValue){return paramValue[1];}
return'';}
function submitTask(){var id;id=getUrlParam('id');if(id){doRequest('POST','../API/bpm/userTask/'+getUrlParam('id')+'/execution',getUserParam()).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the task id value from the URL');}}},template:'<div class="text-{{ properties.alignment }}">\n    <button\n        ng-class="\'btn btn-\' + properties.buttonStyle"\n        ng-click="ctrl.action()"\n        type="button"\n        ng-disabled="properties.disabled || ctrl.busy" ng-bind-html="properties.label | uiTranslate"></button>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbLink',function(){return{controllerAs:'ctrl',controller:function PbLinkCtrl($scope,$location,$window,httpParamSerializer){'use strict';this.getHref=function(){var appToken=getAppToken('app');if($scope.properties.type==='page'){return getPortalUrl()+'/apps/'+(appToken||'APP_TOKEN_PLACEHOLDER')+'/'+$scope.properties.pageToken+buildQueryString();}else if($scope.properties.type==='process'){return getPortalUrl()+'/portal/form/process/'+$scope.properties.processName+'/'+$scope.properties.processVersion+buildQueryString(appToken?{app:appToken}:null);}else if($scope.properties.type==='task'){return getPortalUrl()+'/portal/form/taskInstance/'+$scope.properties.taskId+buildQueryString(appToken?{app:appToken}:null);}else if($scope.properties.type==='overview'){return getPortalUrl()+'/portal/form/processInstance/'+$scope.properties.caseId+buildQueryString(appToken?{app:appToken}:null);}else{return $scope.properties.targetUrl;}};this.getTarget=function(){if($scope.properties.type==='page'){return'_top';}
return $scope.properties.target;};function buildQueryString(additionalParams){var params=angular.extend({},$scope.properties.urlParams||{},additionalParams||{});var queryString=httpParamSerializer.paramSerializer(params);return queryString?'?'+queryString:'';}
function getAppToken(paramName){if($scope.properties.appToken){return $scope.properties.appToken;}
var appTokenParam=getUrlParam(paramName);if(appTokenParam){return appTokenParam;}
var urlMatches=$window.top.location.href.match('\/apps\/([^/]*)\/');if(urlMatches){return urlMatches[1];}
return null;}
function getUrlParam(paramName){var paramValue=$location.absUrl().match('[\/?&]'+paramName+'=([^&#]*)($|[&#])');if(paramValue){return paramValue[1];}
return'';}
function getPortalUrl(){var locationHref=$location.absUrl();var indexOfPortal=locationHref.indexOf('/portal');if(indexOfPortal>=0){return locationHref.substring(0,indexOfPortal);}else{return'/bonita';}}},template:'<div class="text-{{ properties.alignment }}">\n  <a ng-class="properties.buttonStyle !== \'none\' ? \'btn btn-\' + properties.buttonStyle : \'\'" ng-href="{{ctrl.getHref()}}" target="{{ctrl.getTarget()}}" ng-bind-html="properties.text | uiTranslate"></a>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbFormContainer',function(){return{template:''};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbChecklist',function(){return{controllerAs:'ctrl',controller:function PbChecklistCtrl($scope,$parse,widgetNameFactory,$log){'use strict';var ctrl=this;function comparator(item,initialValue){return angular.equals(item,initialValue);}
function createGetter(accessor){return accessor&&$parse(accessor);}
this.getLabel=createGetter($scope.properties.displayedKey)||function(item){return typeof item==='string'?item:JSON.stringify(item);};this.getValue=createGetter($scope.properties.returnedKey)||function(item){return item;};this.updateValues=function(){$scope.properties.selectedValues=ctrl.selectedItems.map(function(checked,index){if(checked!==true){return false;}
var item=$scope.properties.availableValues[index];return ctrl.getValue(item);}).filter(function(item){return item!==false;});};function updateSelectedValues(){ctrl.selectedItems=($scope.properties.availableValues||[]).map(function(item){if(Array.isArray($scope.properties.selectedValues)){return $scope.properties.selectedValues.some(comparator.bind(null,ctrl.getValue(item)));}
return false;});}
$scope.$watchCollection('properties.availableValues',updateSelectedValues);$scope.$watchCollection('properties.selectedValues',updateSelectedValues);this.name=widgetNameFactory.getName('pbChecklist');if(!$scope.properties.isBound('selectedValues')){$log.error('the pbCheckList property named "selectedValues" need to be bound to a variable');}},template:'<div class="row form-group" ng-class="{ \'form-horizontal\':  !properties.labelHidden && properties.labelPosition === \'left\' }">\n    <label\n            ng-if="!properties.labelHidden"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}">\n        {{ properties.label | uiTranslate }}\n    </label>\n\n    <div ng-if="properties.inline" class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n        <label class="checkbox-inline" ng-repeat="choice in properties.availableValues track by $index">\n            <input\n                    type="checkbox"\n                    name="{{ctrl.name}}"\n                    ng-model="ctrl.selectedItems[$index]"\n                    ng-change="ctrl.updateValues()"\n                    ng-disabled="properties.disabled">\n            {{ (ctrl.getLabel(choice) || choice) | uiTranslate }}\n        </label>\n    </div>\n\n    <div ng-if="!properties.inline" class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n        <div ng-if="!properties.inline" class="checkbox" ng-repeat="choice in properties.availableValues track by $index">\n            <label>\n                <input\n                        type="checkbox"\n                        name="{{ctrl.name}}"\n                        ng-model="ctrl.selectedItems[$index]"\n                        ng-change="ctrl.updateValues()"\n                        ng-disabled="properties.disabled">\n                {{ (ctrl.getLabel(choice) || choice) | uiTranslate }}\n            </label>\n        </div>\n    </div>\n</div>\n'};});